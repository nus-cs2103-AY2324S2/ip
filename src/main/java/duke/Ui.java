package duke;

/**
 * The Ui class is responsible for handling user interactions.
 * It provides methods to display messages to the user and parse user input.
 */
public class Ui {
    /**
     * Prints one or more messages to the console, each separated by a line.
     *
     * @param messages An array of messages to be printed.
     */
    public static void printWithLines(String... messages) {
        System.out.println("------------------------------------------");
        for (String message : messages) {
            System.out.println(message);
        }
    }

    /**
     * Displays an error message when there is an error loading the file.
     */
    public static void showLoadingError() {
        printWithLines("Error loading file");
    }

    /**
     * Parses and processes user input, delegating to specific handler methods based on the command.
     * This method serves as the central point of command processing for the application, routing
     * different commands like "todo", "deadline", "event", "list", "mark", "unmark", "delete", and "find"
     * to their respective handler methods. It also handles the "bye" command directly. If the command
     * does not match any known command, it throws a DukeException indicating that the command is unknown.
     *
     * @param list The task list that the commands will operate on. This could involve adding, deleting,
     *             marking, unmarking tasks, listing tasks, or finding tasks within the list.
     * @param message The raw user input containing the command and any arguments. The format and presence
     *                of arguments depend on the specific command. For example, "todo" commands expect a task
     *                description, "deadline" and "event" commands expect descriptions and dates/times, while
     *                "mark" and "unmark" commands expect a task number.
     * @return A string response generated by the specific command handler. This response could confirm
     *         the execution of a command, list tasks, show an error message, or say goodbye in the case
     *         of the "bye" command.
     * @throws DukeException If the user input is invalid for the given command, such as missing arguments
     *                       for "todo", "deadline", or "event", an invalid task number for "mark" or "unmark",
     *                       or if the command is unrecognized. The exception message is specific to the error
     *                       encountered, providing feedback to the user.
     */
    public static String parse(TaskList list, String message) throws DukeException {
        try {
            if (message.startsWith("todo")) {
                return Parser.handleTodo(list, message);
            } else if (message.startsWith("deadline")) {
                return Parser.handleDeadline(list, message);
            } else if (message.startsWith("event")) {
                return Parser.handleEvent(list, message);
            } else if (message.equals("list")) {
                return Parser.handleList(list);
            } else if (message.startsWith("mark")) {
                return Parser.handleMark(list, message);
            } else if (message.startsWith("unmark")) {
                return Parser.handleUnmark(list, message);
            } else if (message.startsWith("delete")) {
                return Parser.deleteTask(list, message);
            } else if (message.startsWith("find")) {
                return Parser.findTask(list, message);
            } else if (message.equals("bye")) {
                return "Bye! Hope to see you again soon!";
            } else if (message.startsWith("tag")) {
                return Parser.handleTag(list, message);
            } else if (message.startsWith("removetag")) {
                return Parser.removeTag(list, message);
            } else {
                throw new DukeException("I'm sorry, but I don't know what that means :-(");
            }
        } catch (DukeException e) {
            throw e;
        }
    }

    public static String showWelcome() {
        return "Hello! I'm Bob!\nWhat can I do for you?";
    }

}
