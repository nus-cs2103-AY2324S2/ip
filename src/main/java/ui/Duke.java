package ui;

import static parser.Parser.parseCommand;


import java.util.ArrayList;

import actions.Action;
import exceptionhandling.DukeException;
import storage.Storage;
import tasklist.TaskList;


/**
 * Duke is a simple chatbot application that allows users to manage a list of tasks.
 * It provides features such as adding tasks, marking tasks as done, deleting tasks,
 * and saving tasks to and loading tasks from a file.
 */
public class Duke {
    private String name;
    private TaskList taskList;
    protected Storage storage;

    /**
     * Constructs a new instance of the Duke chatbot.
     *
     * This constructor initializes the Duke chatbot by setting its name to "Alice", creating an empty task list,
     * and initializing the storage system.
     */
    public Duke() {
        this.name = "Alice";
        this.taskList = new TaskList(new ArrayList<>());
        this.storage = new Storage();
    }

    /**
     * Gets the name of the Duke chatbot.
     *
     * @return The name of the Duke chatbot.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Exits the Duke chatbot application, saving the current task list to a file.
     */
    public void exit() {
        this.storage.save(this.taskList);
        System.exit(0);
    }

    /**
     * Gets the current task list of the Duke chatbot.
     *
     * @return The TaskList containing the tasks managed by the Duke chatbot.
     */
    public TaskList getTaskList() {
        return this.taskList;
    }

    /**
     * Processes user input and returns a response.
     *
     * This method takes a user input, parses it to determine the action to be performed, executes the action,
     * saves the task list to storage if necessary, and returns the response generated by the action execution.
     *
     * @param input The user input to be processed.
     * @return The response generated by executing the action determined by the input.
     *         If the response is null, an empty string is returned.
     *         If an error occurs during processing, an appropriate error message is returned.
     */
    public String getResponse(String input) {
        try {
            Action action = parseCommand(input);
            String response =  action.execute(this);
            if (response == null) {
                return "";
            }
            this.storage.save(this.taskList);
            return response;
        } catch (DukeException e) {
            return (e.getMessage());
        }
    }
}
