
package xiaobai;

import ui.Ui;

import storage.Storage;

import task.TaskList;
import task.Task;
import task.Deadline;
import task.Event;
import task.Todo;

import exception.XiaoBaiException;

import command.Command;

import parser.Parser;

/**
 * Represents the main logic of the XiaoBai application.
 * It handles user input, processes commands, and generates responses
 * accordingly.
 */
public class XiaoBai {
    private Ui ui;
    private Storage storage;
    private TaskList taskList;
    private static final String BOTNAME = "XiaoBai";

    /**
     * Constructs a new instance of XiaoBai.
     * Initializes the UI, storage, and task list components.
     * If there's an error loading tasks from storage, a default task list is
     * created.
     */
    public XiaoBai() {
        this.ui = new Ui();
        this.storage = new Storage();
        try {
            this.taskList = new TaskList(storage.load());
        } catch (XiaoBaiException e) {
            ui.showLoadingError(e);
            this.taskList = new TaskList();
        }
    }

    /**
     * Returns the name of the XiaoBai bot.
     * 
     * @return The name of the bot.
     */
    public static String getName() {
        return BOTNAME;
    }

    /**
     * Generates a response to the user input.
     * Parses the input, processes commands, and returns a response string.
     * 
     * @param input The user input string.
     * @return The response generated by XiaoBai.
     */
    public String getResponse(String input) {
        try {
            Command command = Parser.parseCommand(input);
            switch (command.getInputType()) {
                case SORT:
                    taskList.sort();
                    return ui.showSortMessage(taskList);
                case BYE:
                    storage.writeArrayListToFile(taskList);
                    return ui.showExitMessage();
                case TODO:
                    return processTodoCommand(input);
                case LIST:
                    return ui.showPrintListMessage(taskList);
                case DEADLINE:
                    return processDeadlineCommand(input);
                case EVENT:
                    return processEventCommand(input);
                case MARK:
                    return processMarkCommand(input);
                case UNMARK:
                    return processUnmarkCommand(input);
                case DELETE:
                    return processDeleteCommand(input);
                case FIND:
                    return processFindCommand(input);
                case UNKNOWN:
                    throw new XiaoBaiException("Unknown input");
                default:
                    throw new XiaoBaiException("Unknown input");
            }
        } catch (XiaoBaiException e) {
            return ui.showErrorMessage(e);
        }
    }

    /**
     * Represents the types of commands that XiaoBai can process.
     */
    public enum CommandType {
        TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, DELETE, BYE, UNKNOWN, FIND, SORT
    }

    /**
     * Processes a todo command, extracts task details, adds the task to the task
     * list,
     * and returns a message confirming the addition.
     *
     * @param input The input string containing the todo command and task details.
     * @return A message confirming the addition of the todo task.
     * @throws XiaoBaiException If task details are empty or if there is an error
     *                          adding the task.
     */
    public String processTodoCommand(String input) throws XiaoBaiException {
        Todo newTodo = new Todo(input.substring(4));
        taskList.addTask(newTodo);
        return ui.showAddTaskMessage(newTodo, taskList);
    }

    /**
     * Processes a deadline command, extracts task details, adds the task to the
     * task list,
     * and returns a message confirming the addition.
     *
     * @param input The input string containing the deadline command and task
     *              details.
     * @return A message confirming the addition of the deadline task.
     * @throws XiaoBaiException If task details are empty or if there is an error
     *                          adding the task.
     */
    public String processDeadlineCommand(String input) throws XiaoBaiException {
        String[] parts = input.substring(8).split(" /");
        Deadline newDeadline = new Deadline(parts[0], parts[1].substring(3));
        taskList.addTask(newDeadline);
        return ui.showAddTaskMessage(newDeadline, taskList);
    }

    /**
     * Processes an event command, extracts task details, adds the task to the task
     * list,
     * and returns a message confirming the addition.
     *
     * @param input The input string containing the event command and task details.
     * @return A message confirming the addition of the event task.
     * @throws XiaoBaiException If task details are empty or if there is an error
     *                          adding the task.
     */
    public String processEventCommand(String input) throws XiaoBaiException {
        String[] parts = input.substring(5).split(" /");
        Event newEvent = new Event(parts[0], parts[1].substring(5),
                parts[2].substring(3));
        taskList.addTask(newEvent);
        return ui.showAddTaskMessage(newEvent, taskList);
    }

    /**
     * Processes a mark command, marks a task as done, and returns a message
     * confirming the change.
     *
     * @param input The input string containing the mark command and task index.
     * @return A message confirming the task has been marked as done.
     */
    public String processMarkCommand(String input) {
        String[] parts = input.split(" ");
        int index = Integer.parseInt(parts[1]);
        Task task = taskList.getTask(index - 1);
        task.setDone();
        return ui.showMarkMessage(task);
    }

    /**
     * Processes an unmark command, marks a task as not done, and returns a message
     * confirming the change.
     *
     * @param input The input string containing the unmark command and task index.
     * @return A message confirming the task has been marked as not done.
     */
    public String processUnmarkCommand(String input) {
        String[] parts = input.split(" ");
        Task unmarkTask = taskList.getTask(Integer.parseInt(parts[1]) - 1);
        unmarkTask.setNotDone();
        return ui.showUnmarkMessage(unmarkTask);
    }

    /**
     * Processes a delete command, removes a task from the task list, and returns a
     * message confirming the deletion.
     *
     * @param input The input string containing the delete command and task index.
     * @return A message confirming the task has been deleted.
     */
    public String processDeleteCommand(String input) throws XiaoBaiException {
        if (taskList.isEmpty()) {
            throw new XiaoBaiException("Task List is empty");
        }
        String[] parts = input.split(" ");
        int deleteIndex = Integer.parseInt(parts[1]) - 1;
        Task deletedTask = taskList.getTask(deleteIndex);
        taskList.removeTask(deleteIndex);
        return ui.showDeleteMessage(deletedTask, taskList);
    }

    /**
     * Processes a find command, searches for tasks containing the specified string,
     * and returns a message displaying the matching tasks.
     *
     * @param input The input string containing the find command and search string.
     * @return A message displaying the matching tasks found.
     */
    public String processFindCommand(String input) {
        String stringToFind = input.substring(5);
        return ui.showFoundTask(taskList, stringToFind);
    }
}